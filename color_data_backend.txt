import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import cv2
from sklearn.cluster import KMeans
img=cv2.imread('Horse.jpg')
print(img.shape)

plt.imshow(img)
img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
plt.imshow(img)
img = img.reshape((img.shape[0] * img.shape[1],img.shape[2]))
k = 5
kmeans = KMeans(n_clusters = k) # "pick out" the K-means tool from our collection of algorithms
kmeans.fit(img) # apply the model to our data, the image
centroid=kmeans.cluster_centers_
print(centroid)
#determining labels
labels=kmeans.labels_
print(labels)
labels=list(labels)
percent=[]
for i in range(len(centroid)):
  j=labels.count(i)
  j=j/(len(kmeans.labels_))
  percent.append(j)
print(percent)
plt.pie(percent,colors=np.array(centroid/255),labels=np.arange(len(centroid)),autopct='%1.2f%%')
plt.show()
img_init = img.copy()
#plt.figure (figsize = (6,6))
# plot initial image 

plt.imshow(img_init)
label_indx = np.arange(0,len(np.unique(kmeans.labels_)) + 1) 
np.histogram(labels,bins=label_indx)

(hist,_)=np.histogram(labels,bins=label_indx)
hist=hist.astype("float")
hist /=hist.sum()
hist *100
hist_bar = np.zeros((50, 300, 3), dtype = "uint8")
startX = 0
for (percent, color) in zip(hist,  kmeans.cluster_centers_): 
  endX = startX + (percent * 300) # to match grid
  cv2.rectangle(hist_bar, (int(startX), 0), (int(endX), 50),
      color.astype("uint8").tolist(), -1)
  startX = endX
plt.figure(figsize=(15,15))
plt.subplot(121)
plt.imshow(img_init)
plt.subplot(122)
plt.imshow(hist_bar)
plt.show()